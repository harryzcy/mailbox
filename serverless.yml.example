service: mailbox

frameworkVersion: "3"

provider:
  name: aws
  runtime: provided.al2
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  environment:
    REGION: ${self:provider.region}
    DYNAMODB_TABLE: mailbox-${self:provider.stage}
    DYNAMODB_TIME_INDEX: TimeIndex
    DYNAMODB_ORIGINAL_INDEX: OriginalMessageIDIndex
    S3_BUCKET: example-mailbox # set this to your S3 bucket name
    SQS_QUEUE: example-mailbox # set this to your SQS queue name
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/${self:provider.environment.DYNAMODB_TIME_INDEX}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/${self:provider.environment.DYNAMODB_ORIGINAL_INDEX}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:DeleteObject
          Resource: "arn:aws:s3::*:${self:provider.environment.S3_BUCKET}/*"
        - Effect: Allow
          Action:
            - sqs:GetQueueUrl
            - sqs:SendMessage
          Resource: "arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.SQS_QUEUE}"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "arn:aws:ses:${self:provider.region}:*:identity/*"
  apiGateway:
    shouldStartNameWithService: true

package:
  patterns:
    - "!./**"
  individually: true

functions:
  emailReceive:
    handler: bootstrap
    environment:
      ENABLE_SQS: true
    package:
      artifact: bin/emailReceive.zip
  emailsList:
    handler: bin/api/emails/list
    events:
      - httpApi:
          path: /emails
          method: GET
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_list.zip
  emailsGet:
    handler: bootstrap
    events:
      - httpApi:
          method: GET
          path: /emails/{messageID}
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_get.zip
  emailsGetRaw:
    handler: bootstrap
    events:
      - httpApi:
          method: GET
          path: /emails/{messageID}/raw
          authorizer:
            type: aws_iam
      - httpApi:
          method: GET
          path: /emails/{messageID}/download
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_getRaw.zip
  emailsGetContent:
    handler: bootstrap
    events:
      - httpApi:
          method: GET
          path: /emails/{messageID}/attachments/{contentID}
          authorizer:
            type: aws_iam
      - httpApi:
          method: GET
          path: /emails/{messageID}/inlines/{contentID}
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_getContent.zip
  emailsRead:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /emails/{messageID}/read
          authorizer:
            type: aws_iam
      - httpApi:
          method: POST
          path: /emails/{messageID}/unread
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_read.zip
  emailsTrash:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /emails/{messageID}/trash
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_trash.zip
  emailsUntrash:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /emails/{messageID}/untrash
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_untrash.zip
  emailsDelete:
    handler: bootstrap
    events:
      - httpApi:
          method: DELETE
          path: /emails/{messageID}
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_delete.zip
  emailsCreate:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /emails
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_create.zip
  emailsSave:
    handler: bootstrap
    events:
      - httpApi:
          method: PUT
          path: /emails/{messageID}
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_save.zip
  emailsSend:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /emails/{messageID}/send
          authorizer:
            type: aws_iam
    package:
      artifact: bin/emails_send.zip
  threadsGet:
    handler: bootstrap
    events:
      - httpApi:
          method: GET
          path: /threads/{threadID}
          authorizer:
            type: aws_iam
    package:
      artifact: bin/threads_get.zip
  threadsDelete:
    handler: bootstrap
    events:
      - httpApi:
          method: DELETE
          path: /threads/{threadID}
          authorizer:
            type: aws_iam
    package:
      artifact: bin/threads_delete.zip
  threadsTrash:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /threads/{threadID}/trash
          authorizer:
            type: aws_iam
    package:
      artifact: bin/threads_trash.zip
  threadsUntrash:
    handler: bootstrap
    events:
      - httpApi:
          method: POST
          path: /threads/{threadID}/untrash
          authorizer:
            type: aws_iam
    package:
      artifact: bin/threads_untrash.zip
  info:
    handler: bootstrap
    events:
      - httpApi:
          method: GET
          path: /info
          authorizer:
            type: aws_iam
    package:
      artifact: bin/info.zip

resources:
  Resources:
    MailboxDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: MessageID
            AttributeType: S
          - AttributeName: TypeYearMonth
            AttributeType: S
          - AttributeName: DateTime
            AttributeType: S
          - AttributeName: OriginalMessageID
            AttributeType: S
        KeySchema:
          - AttributeName: MessageID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_TIME_INDEX}
            KeySchema:
              - AttributeName: TypeYearMonth
                KeyType: HASH
              - AttributeName: DateTime
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - Subject
                - From
                - To
                - Unread
                - TrashedTime
                - ThreadID
                - IsThreadLatest
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 1
          - IndexName: ${self:provider.environment.DYNAMODB_ORIGINAL_INDEX}
            KeySchema:
              - AttributeName: OriginalMessageID
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 1
